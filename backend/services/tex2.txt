const { MoleculerError } = require("moleculer").Errors;
const Sequelize = require("sequelize");
const DbService = require("moleculer-db");
const SqlAdapter = require("moleculer-db-adapter-sequelize");

module.exports = {
	name: "analytics",
	mixins: [DbService],
	adapter: new SqlAdapter(
		"postgres://uutsavacharya15@localhost:5432/inveniraBD?schema=invenirabd",
		{
			schema: "invenirabd",
			logging: false,
			searchPath: "invenirabd",
			freezeTableName: true,
			define: {
				timestamps: false,
			},
			dialectOptions: {
				prependSearchPath: true,
			},
		}
	),

	model: {
		name: "analytics",
		schema: "invenirabd",
		timestamps: false,
		define: {
			activity_id: Sequelize.INTEGER,
			name: Sequelize.STRING,
			score: Sequelize.INTEGER,
		},
	},

	actions: {
		//Actions to be implemented
		//1: Get the analytics of the activities of the iap that the user (if there is connection between iap and user whether the user owns or not)
		//2: Set new score to the analytics of the activities of the iap that the user (if there is connection between iap and user whether the user owns or not)
		///////////////
		//Note:-
		//If you see the schema, User has iaps, iaps nodes are the activities of the iap, objectives use foregin key of the iap, objective is linked to analytics with objective_analytics. Activity has analytics
		//Structure of iaps
		//
		/*
        {
        "id": 109,
        "name": "bbb",
        "properties": {},
        "nodes": [
            {
                "id": 86,
                "name": "HTML and CSS basics"
            },
            {
                "id": 87,
                "name": "Javascript Basics"
            },
            {
                "id": 88,
                "name": "MiniProject-Portfolio"
            }
        ],
        "edges": [
            {
                "source": 86,
                "target": 87,
                "label": "not-completed"
            },
            {
                "source": 87,
                "target": 88,
                "label": "not-completed"
            }
        ],
        "is_deployed": false
    }
    */
	},
};
